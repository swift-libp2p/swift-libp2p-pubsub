//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-libp2p open source project
//
// Copyright (c) 2022-2025 swift-libp2p project authors
// Licensed under MIT
//
// See LICENSE for license information
// See CONTRIBUTORS for the list of swift-libp2p project authors
//
// SPDX-License-Identifier: MIT
//
//===----------------------------------------------------------------------===//

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: RPC2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RPC {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subscriptions: [RPC.SubOpts] = []

  var msgs: [RPC.Message] = []

  var control: RPC.ControlMessage {
    get {return _control ?? RPC.ControlMessage()}
    set {_control = newValue}
  }
  /// Returns true if `control` has been explicitly set.
  var hasControl: Bool {return self._control != nil}
  /// Clears the value of `control`. Subsequent reads from it will return its default value.
  mutating func clearControl() {self._control = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SubOpts {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// subscribe or unsubcribe
    var subscribe: Bool {
      get {return _subscribe ?? false}
      set {_subscribe = newValue}
    }
    /// Returns true if `subscribe` has been explicitly set.
    var hasSubscribe: Bool {return self._subscribe != nil}
    /// Clears the value of `subscribe`. Subsequent reads from it will return its default value.
    mutating func clearSubscribe() {self._subscribe = nil}

    var topicID: String {
      get {return _topicID ?? String()}
      set {_topicID = newValue}
    }
    /// Returns true if `topicID` has been explicitly set.
    var hasTopicID: Bool {return self._topicID != nil}
    /// Clears the value of `topicID`. Subsequent reads from it will return its default value.
    mutating func clearTopicID() {self._topicID = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _subscribe: Bool? = nil
    fileprivate var _topicID: String? = nil
  }

  struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: Data {
      get {return _from ?? Data()}
      set {_from = newValue}
    }
    /// Returns true if `from` has been explicitly set.
    var hasFrom: Bool {return self._from != nil}
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    mutating func clearFrom() {self._from = nil}

    var data: Data {
      get {return _data ?? Data()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    mutating func clearData() {self._data = nil}

    var seqno: Data {
      get {return _seqno ?? Data()}
      set {_seqno = newValue}
    }
    /// Returns true if `seqno` has been explicitly set.
    var hasSeqno: Bool {return self._seqno != nil}
    /// Clears the value of `seqno`. Subsequent reads from it will return its default value.
    mutating func clearSeqno() {self._seqno = nil}

    var topicIds: [String] = []

    var signature: Data {
      get {return _signature ?? Data()}
      set {_signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    var hasSignature: Bool {return self._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    mutating func clearSignature() {self._signature = nil}

    var key: Data {
      get {return _key ?? Data()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    mutating func clearKey() {self._key = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _from: Data? = nil
    fileprivate var _data: Data? = nil
    fileprivate var _seqno: Data? = nil
    fileprivate var _signature: Data? = nil
    fileprivate var _key: Data? = nil
  }

  struct ControlMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ihave: [RPC.ControlIHave] = []

    var iwant: [RPC.ControlIWant] = []

    var graft: [RPC.ControlGraft] = []

    var prune: [RPC.ControlPrune] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ControlIHave {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var topicID: String {
      get {return _topicID ?? String()}
      set {_topicID = newValue}
    }
    /// Returns true if `topicID` has been explicitly set.
    var hasTopicID: Bool {return self._topicID != nil}
    /// Clears the value of `topicID`. Subsequent reads from it will return its default value.
    mutating func clearTopicID() {self._topicID = nil}

    var messageIds: [Data] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _topicID: String? = nil
  }

  struct ControlIWant {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var messageIds: [Data] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ControlGraft {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var topicID: String {
      get {return _topicID ?? String()}
      set {_topicID = newValue}
    }
    /// Returns true if `topicID` has been explicitly set.
    var hasTopicID: Bool {return self._topicID != nil}
    /// Clears the value of `topicID`. Subsequent reads from it will return its default value.
    mutating func clearTopicID() {self._topicID = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _topicID: String? = nil
  }

  struct ControlPrune {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var topicID: String {
      get {return _topicID ?? String()}
      set {_topicID = newValue}
    }
    /// Returns true if `topicID` has been explicitly set.
    var hasTopicID: Bool {return self._topicID != nil}
    /// Clears the value of `topicID`. Subsequent reads from it will return its default value.
    mutating func clearTopicID() {self._topicID = nil}

    var peers: [RPC.PeerInfo] = []

    var backoff: UInt64 {
      get {return _backoff ?? 0}
      set {_backoff = newValue}
    }
    /// Returns true if `backoff` has been explicitly set.
    var hasBackoff: Bool {return self._backoff != nil}
    /// Clears the value of `backoff`. Subsequent reads from it will return its default value.
    mutating func clearBackoff() {self._backoff = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _topicID: String? = nil
    fileprivate var _backoff: UInt64? = nil
  }

  struct PeerInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var peerID: Data {
      get {return _peerID ?? Data()}
      set {_peerID = newValue}
    }
    /// Returns true if `peerID` has been explicitly set.
    var hasPeerID: Bool {return self._peerID != nil}
    /// Clears the value of `peerID`. Subsequent reads from it will return its default value.
    mutating func clearPeerID() {self._peerID = nil}

    var signedPeerRecord: Data {
      get {return _signedPeerRecord ?? Data()}
      set {_signedPeerRecord = newValue}
    }
    /// Returns true if `signedPeerRecord` has been explicitly set.
    var hasSignedPeerRecord: Bool {return self._signedPeerRecord != nil}
    /// Clears the value of `signedPeerRecord`. Subsequent reads from it will return its default value.
    mutating func clearSignedPeerRecord() {self._signedPeerRecord = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _peerID: Data? = nil
    fileprivate var _signedPeerRecord: Data? = nil
  }

  init() {}

  fileprivate var _control: RPC.ControlMessage? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RPC: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RPC"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscriptions"),
    2: .same(proto: "msgs"),
    3: .same(proto: "control"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.subscriptions) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.msgs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._control) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subscriptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subscriptions, fieldNumber: 1)
    }
    if !self.msgs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.msgs, fieldNumber: 2)
    }
    if let v = self._control {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC, rhs: RPC) -> Bool {
    if lhs.subscriptions != rhs.subscriptions {return false}
    if lhs.msgs != rhs.msgs {return false}
    if lhs._control != rhs._control {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.SubOpts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".SubOpts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscribe"),
    2: .same(proto: "topicID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._subscribe) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._topicID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._subscribe {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._topicID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.SubOpts, rhs: RPC.SubOpts) -> Bool {
    if lhs._subscribe != rhs._subscribe {return false}
    if lhs._topicID != rhs._topicID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "data"),
    3: .same(proto: "seqno"),
    4: .same(proto: "topicIDs"),
    5: .same(proto: "signature"),
    6: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._from) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._seqno) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.topicIds) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._signature) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self._key) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._from {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._seqno {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if !self.topicIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.topicIds, fieldNumber: 4)
    }
    if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.Message, rhs: RPC.Message) -> Bool {
    if lhs._from != rhs._from {return false}
    if lhs._data != rhs._data {return false}
    if lhs._seqno != rhs._seqno {return false}
    if lhs.topicIds != rhs.topicIds {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.ControlMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".ControlMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ihave"),
    2: .same(proto: "iwant"),
    3: .same(proto: "graft"),
    4: .same(proto: "prune"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.ihave) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.iwant) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.graft) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.prune) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ihave.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ihave, fieldNumber: 1)
    }
    if !self.iwant.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.iwant, fieldNumber: 2)
    }
    if !self.graft.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.graft, fieldNumber: 3)
    }
    if !self.prune.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.prune, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.ControlMessage, rhs: RPC.ControlMessage) -> Bool {
    if lhs.ihave != rhs.ihave {return false}
    if lhs.iwant != rhs.iwant {return false}
    if lhs.graft != rhs.graft {return false}
    if lhs.prune != rhs.prune {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.ControlIHave: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".ControlIHave"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topicID"),
    2: .same(proto: "messageIDs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._topicID) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.messageIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._topicID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.messageIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.messageIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.ControlIHave, rhs: RPC.ControlIHave) -> Bool {
    if lhs._topicID != rhs._topicID {return false}
    if lhs.messageIds != rhs.messageIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.ControlIWant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".ControlIWant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageIDs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.messageIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.messageIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.ControlIWant, rhs: RPC.ControlIWant) -> Bool {
    if lhs.messageIds != rhs.messageIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.ControlGraft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".ControlGraft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topicID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._topicID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._topicID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.ControlGraft, rhs: RPC.ControlGraft) -> Bool {
    if lhs._topicID != rhs._topicID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.ControlPrune: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".ControlPrune"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topicID"),
    2: .same(proto: "peers"),
    3: .same(proto: "backoff"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._topicID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.peers) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._backoff) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._topicID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.peers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.peers, fieldNumber: 2)
    }
    if let v = self._backoff {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.ControlPrune, rhs: RPC.ControlPrune) -> Bool {
    if lhs._topicID != rhs._topicID {return false}
    if lhs.peers != rhs.peers {return false}
    if lhs._backoff != rhs._backoff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RPC.PeerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RPC.protoMessageName + ".PeerInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "peerID"),
    2: .same(proto: "signedPeerRecord"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._peerID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._signedPeerRecord) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._peerID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._signedPeerRecord {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RPC.PeerInfo, rhs: RPC.PeerInfo) -> Bool {
    if lhs._peerID != rhs._peerID {return false}
    if lhs._signedPeerRecord != rhs._signedPeerRecord {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
